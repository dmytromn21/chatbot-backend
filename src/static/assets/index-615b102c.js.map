{"version":3,"mappings":"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","names":["Layout","jsxs","styles","jsx","Link","Outlet","RetrievalMode","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","rowId","ind","citation","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","question","setQuestion","useState","useEffect","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","DEFAULT_EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","AnalysisPanelTabs","ThoughtProcess","thoughts","t","k","SyntaxHighlighter","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","setCitation","fetchCitation","originalHash","citationContent","citationObjectUrl","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","VectorSettings","updateRetrievalMode","retrievalMode","setRetrievalMode","onRetrievalModeChange","option","Dropdown","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","retrieveCount","setRetrieveCount","useAdvancedFlow","setUseAdvancedFlow","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","makeApiRequest","allMessages","options","result","AIChatProtocolClient","e","clearChat","onPromptTemplateChange","onTemperatureChange","range","event","onRetrieveCountChange","onUseAdvancedFlowChange","checked","example","onShowCitation","onToggleTab","tab","c","q","Fragment","SparkleFilled","Panel","DefaultButton","Checkbox","SpinButton","Slider","layout","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../frontend/src/pages/layout/Layout.tsx","../../frontend/src/api/models.ts","../../frontend/src/components/Answer/AnswerParser.tsx","../../frontend/src/components/Answer/AnswerIcon.tsx","../../frontend/src/components/Answer/Answer.tsx","../../frontend/src/components/Answer/AnswerLoading.tsx","../../frontend/src/components/Answer/AnswerError.tsx","../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../frontend/src/components/Example/Example.tsx","../../frontend/src/components/Example/ExampleList.tsx","../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../frontend/src/pages/chat/Chat.tsx","../../frontend/src/index.tsx"],"sourcesContent":["import { Outlet, Link } from \"react-router-dom\";\r\n\r\nimport styles from \"./Layout.module.css\";\r\n\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"}>\r\n                <div className={styles.headerContainer}>\r\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                        <h3 className={styles.headerTitle}>Alex's RAG for Events</h3>\r\n                    </Link>\r\n                    <h4 className={styles.headerRightText}>OpenAI + PostgreSQL</h4>\r\n                </div>\r\n            </header>\r\n\r\n            <Outlet />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { AIChatCompletion } from \"@microsoft/ai-chat-protocol\";\r\n\r\nexport const enum RetrievalMode {\r\n    Hybrid = \"hybrid\",\r\n    Vectors = \"vectors\",\r\n    Text = \"text\"\r\n}\r\n\r\nexport type ChatAppRequestOverrides = {\r\n    use_advanced_flow?: boolean;\r\n    retrieval_mode?: RetrievalMode;\r\n    top?: number;\r\n    temperature?: number;\r\n    prompt_template?: string;\r\n};\r\n\r\nexport type Thoughts = {\r\n    title: string;\r\n    description: any; // It can be any output from the api\r\n    props?: { [key: string]: string };\r\n};\r\n\r\nexport type RAGContext = {\r\n    data_points: { [key: string]: any };\r\n    followup_questions: string[] | null;\r\n    thoughts: Thoughts[];\r\n};\r\n\r\nexport interface RAGChatCompletion extends AIChatCompletion {\r\n    context: RAGContext;\r\n}\r\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: string[];\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: string[] = [];\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    let parsedAnswer = answer.trim();\r\n\r\n    // Omit a citation that is still being typed during streaming\r\n    if (isStreaming) {\r\n        let lastIndex = parsedAnswer.length;\r\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\r\n            if (parsedAnswer[i] === \"]\") {\r\n                break;\r\n            } else if (parsedAnswer[i] === \"[\") {\r\n                lastIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\r\n        parsedAnswer = truncatedAnswer;\r\n    }\r\n\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 2 === 0) {\r\n            return part;\r\n        } else {\r\n            let citationIndex: number;\r\n            if (citations.indexOf(part) !== -1) {\r\n                citationIndex = citations.indexOf(part) + 1;\r\n            } else {\r\n                citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\nimport { RAGChatCompletion } from \"../../api/models\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\ninterface Props {\r\n    answer: RAGChatCompletion;\r\n    isSelected?: boolean;\r\n    isStreaming: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    showFollowupQuestions?: boolean;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    isSelected,\r\n    isStreaming,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    showFollowupQuestions\r\n}: Props) => {\r\n    const followupQuestions = answer.context.followup_questions;\r\n    const messageContent = answer.message.content;\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\r\n\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title=\"Show thought process\"\r\n                            ariaLabel=\"Show thought process\"\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.context.thoughts?.length}\r\n                        />\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>References:</span>\r\n                        <ol>\r\n                        {parsedAnswer.citations.map((rowId, ind) => {\r\n                            const citation = answer.context.data_points[rowId];\r\n                            if (!citation) return null;\r\n                            return (\r\n                                <li key={rowId}>\r\n                                    <h4>{citation.name}</h4>\r\n                                    <p className={styles.referenceMetadata}>Category: {citation.category}</p>\r\n                                    <p className={styles.referenceMetadata}>Price: {citation.price}</p>\r\n                                    <p className={styles.referenceMetadata}>Date: {citation.start_date_typed}</p>\r\n                                    <p>{citation.description}</p>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                        </ol>\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\r\n                        {followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        Generating answer\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    initQuestion?: string;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        initQuestion && setQuestion(initQuestion);\r\n    }, [initQuestion]);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\r\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={sendQuestion} />\r\n                </Tooltip>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    onClick: (value: string) => void;\r\n}\r\n\r\nexport const Example = ({ text, value, onClick }: Props) => {\r\n    return (\r\n        <div className={styles.example} onClick={() => onClick(value)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Example } from \"./Example\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\nconst DEFAULT_EXAMPLES: string[] = [\r\n    \"Inspire me with an event tonight\",\r\n    \"What sports events are upcoming?\",\r\n    \"Any must-see events in the next few weeks?\",\r\n];\r\n\r\ninterface Props {\r\n    onExampleClicked: (value: string) => void\r\n}\r\n\r\nexport const ExampleList = ({ onExampleClicked }: Props) => {\r\n    return (\r\n        <ul className={styles.examplesNavList}>\r\n            {DEFAULT_EXAMPLES.map((question, i) => (\r\n                <li key={i}>\r\n                    <Example text={question} value={question} onClick={onExampleClicked} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Stack } from \"@fluentui/react\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { Thoughts } from \"../../api\";\r\n\r\ninterface Props {\r\n    thoughts: Thoughts[];\r\n}\r\n\r\nexport const ThoughtProcess = ({ thoughts }: Props) => {\r\n    return (\r\n        <ul className={styles.tList}>\r\n            {thoughts.map((t, ind) => {\r\n                return (\r\n                    <li className={styles.tListItem} key={ind}>\r\n                        <div className={styles.tStep}>{t.title}</div>\r\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\r\n                            {t.props &&\r\n                                (Object.keys(t.props) || []).map((k: any) => (\r\n                                    <span className={styles.tProp}>\r\n                                        {k}: {JSON.stringify(t.props?.[k])}\r\n                                    </span>\r\n                                ))}\r\n                        </Stack>\r\n                        {Array.isArray(t.description) ? (\r\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock}>\r\n                                {JSON.stringify(t.description, null, 2)}\r\n                            </SyntaxHighlighter>\r\n                        ) : (\r\n                            <div>{t.description}</div>\r\n                        )}\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { RAGChatCompletion } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\nimport { ThoughtProcess } from \"./ThoughtProcess\";\r\nimport { MarkdownViewer } from \"../MarkdownViewer\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: RAGChatCompletion;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n    const [citation, setCitation] = useState(\"\");\r\n\r\n\r\n    const fetchCitation = async () => {\r\n        if (activeCitation) {\r\n            // Get hash from the URL as it may contain #page=N\r\n            // which helps browser PDF renderer jump to correct page N\r\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\r\n            const response = await fetch(activeCitation, {\r\n                method: \"GET\"\r\n            });\r\n            const citationContent = await response.blob();\r\n            let citationObjectUrl = URL.createObjectURL(citationContent);\r\n            // Add hash back to the new blob URL\r\n            if (originalHash) {\r\n                citationObjectUrl += \"#\" + originalHash;\r\n            }\r\n            setCitation(citationObjectUrl);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        fetchCitation();\r\n    }, []);\r\n\r\n    const renderFileViewer = () => {\r\n        if (!activeCitation) {\r\n            return null;\r\n        }\r\n\r\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\r\n        switch (fileExtension) {\r\n            case \"png\":\r\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\r\n            case \"md\":\r\n                return <MarkdownViewer src={activeCitation} />;\r\n            default:\r\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText=\"Thought process\"\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { Settings24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./SettingsButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Settings24Regular />} onClick={onClick}>\r\n                {\"Developer settings\"}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\r\n                {\"Clear chat\"}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { Stack, IDropdownOption, Dropdown } from \"@fluentui/react\";\r\n\r\nimport styles from \"./VectorSettings.module.css\";\r\nimport { RetrievalMode } from \"../../api\";\r\n\r\ninterface Props {\r\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\r\n}\r\n\r\nexport const VectorSettings = ({ updateRetrievalMode }: Props) => {\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Dropdown\r\n                label=\"Retrieval mode\"\r\n                options={[\r\n                    { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\r\n                    { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\r\n                    { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\r\n                ]}\r\n                required\r\n                onChange={onRetrievalModeChange}\r\n            />\r\n\r\n        </Stack>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport { Panel, DefaultButton, TextField, SpinButton, Slider, Checkbox } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\nimport { AIChatMessage, AIChatProtocolClient } from \"@microsoft/ai-chat-protocol\";\r\n\r\nimport styles from \"./Chat.module.css\";\r\n\r\nimport {RetrievalMode, RAGChatCompletion} from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\n\r\nconst Chat = () => {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [temperature, setTemperature] = useState<number>(0.3);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [useAdvancedFlow, setUseAdvancedFlow] = useState<boolean>(true);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: RAGChatCompletion][]>([]);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        try {\r\n            const messages: AIChatMessage[] = answers.flatMap(answer => [\r\n                { content: answer[0], role: \"user\" },\r\n                { content: answer[1].message.content, role: \"assistant\" }\r\n            ]);\r\n            const allMessages: AIChatMessage[] = [...messages, { content: question, role: \"user\" }];\r\n            const options = {\r\n                context: {\r\n                    overrides: {\r\n                        use_advanced_flow: useAdvancedFlow,\r\n                        top: retrieveCount,\r\n                        retrieval_mode: retrievalMode,\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        temperature: temperature\r\n                    }\r\n                }\r\n            };\r\n            const chatClient: AIChatProtocolClient = new AIChatProtocolClient(\"/chat\");\r\n            const result = await chatClient.getCompletion(allMessages, options) as RAGChatCompletion;\r\n            setAnswers([...answers, [question, result]]);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onTemperatureChange = (\r\n        newValue: number,\r\n        range?: [number, number],\r\n        event?: React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent | React.KeyboardEvent\r\n    ) => {\r\n        setTemperature(newValue);\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseAdvancedFlowChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseAdvancedFlow(!!checked);\r\n    }\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n            </div>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\r\n                            <h1 className={styles.chatEmptyStateTitle}>Kefi Events Concierge</h1>\r\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\r\n                            <ExampleList onExampleClicked={onExampleClicked} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {answers.map((answer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={answer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={false}\r\n                                                key={index}\r\n                                                answer={answer[1]}\r\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder=\"Ask me anything\"\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText=\"Configure answer generation\"\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel=\"Close\"\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useAdvancedFlow}\r\n                        label=\"Use advanced flow with query rewriting and filter formulation. Not compatible with Ollama models.\"\r\n                        onChange={onUseAdvancedFlowChange}\r\n                    />\r\n\r\n                    <h3>Settings for database search:</h3>\r\n\r\n                    <SpinButton\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Retrieve this many matching rows:\"\r\n                        min={1}\r\n                        max={50}\r\n                        defaultValue={retrieveCount.toString()}\r\n                        onChange={onRetrieveCountChange}\r\n                    />\r\n\r\n                    <VectorSettings\r\n                        updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\r\n                    />\r\n\r\n\r\n                    <h3>Settings for final chat completion:</h3>\r\n\r\n                    <TextField\r\n                        className={styles.chatSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"Override prompt template\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n\r\n                    <Slider\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Temperature\"\r\n                        min={0}\r\n                        max={1}\r\n                        step={0.1}\r\n                        defaultValue={temperature}\r\n                        onChange={onTemperatureChange}\r\n                        showValue\r\n                        snapToStep\r\n                    />\r\n\r\n                </Panel>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Layout from \"./pages/layout/Layout\";\r\nimport Chat from \"./pages/chat/Chat\";\r\n\r\nvar layout = <Layout />;\r\n\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: layout,\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Chat />\r\n            },\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <RouterProvider router={router} />\r\n    </React.StrictMode>\r\n);\r\n"],"file":"assets/index-615b102c.js"}